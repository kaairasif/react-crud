{"version":3,"sources":["components/Portfolio.js","components/SingleView.js","App.js","serviceWorker.js","index.js"],"names":["Portfolio","_this$props","this","props","handleDelete","posts","handleSingleView","react_default","a","createElement","className","map","post","key","id","width","height","src","image","alt","title","text","type","onClick","Link","to","concat","React","Component","SingleView","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","postData","filter","match","params","postID","App","state","bind","assertThisInitialized","setState","data","_this2","Switch","Route","exact","path","render","components_Portfolio","assign","handleView","components_SingleView","Boolean","window","location","hostname","ReactDOM","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8a4fd641.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom'\r\n\r\nclass Portfolio extends React.Component {\r\n\r\n  render() {\r\n    const {posts, handleDelete, handleSingleView} = this.props;\r\n\r\n    return (\r\n      <div className=\"Listcontainer\">\r\n      {this.props.posts && this.props.posts.map( post => (\r\n          <div className=\"Portfolio\" key={post.id}>\r\n            <div className=\"image-wrapper\">\r\n              <img width=\"450\" height=\"250\" src={post.image} alt=\"portfolio\" />\r\n            </div>\r\n            <div className=\"content-area\">\r\n              <h2>{post.title}</h2>\r\n              <p>{post.text}</p>\r\n              <button type=\"button\" onClick={() => handleDelete(post.id)}>Delete</button>\r\n              <button type=\"button\">\r\n              <Link to={`${post.id}`}>View</Link>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Portfolio;\r\n","import React from 'react';\r\n\r\nclass SingleView extends React.Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n        this.postData = this.props.posts.filter(post => post.id == this.props.match.params.postID)\r\n\t}\r\n\r\n\trender() {\r\n\t\t// console.log(\"this.postData\", this.postData);\r\n        const post = this.postData[0]\r\n\t\treturn(\t\t\t\r\n        \t<div className=\"portfolio single\">\r\n\t\t\t\t<div className=\"image-wrapper\">\r\n\t\t          <img width=\"450\" height=\"250\" src={post.image} alt=\"portfolio\" />\r\n\t\t        </div>\r\n\t\t        <div className=\"content-area\">\r\n\t\t          <h2>{post.title}</h2>\r\n\t\t          <p>{post.text}</p>\r\n\t\t        </div>   \r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default SingleView;","import React, { Component } from 'react';\nimport Portfolio from './components/Portfolio';\nimport SingleView from './components/SingleView';\nimport { Switch, Route } from 'react-router';\nimport './App.css';\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      posts : [\n        {\n        \"id\": 1501798834150,\n        \"title\": \"MatLang one\",\n        \"image\": \"http://via.placeholder.com/450x250\",\n        \"text\": \"quam pharetra magna ac consequat metus sapien ut nunc vestibulum ante ipsum primis in faucibus orci luctus\"\n      },\n      {\n        \"id\": 1501798834151,\n        \"title\": \"MatLang two\",\n        \"image\": \"http://via.placeholder.com/450x250\",\n        \"text\": \"quam pharetra magna ac consequat metus sapien ut nunc vestibulum ante ipsum primis in faucibus orci luctus\"\n      },\n      {\n        \"id\": 1501798834152,\n        \"title\": \"MatLang three\",\n        \"image\": \"http://via.placeholder.com/450x250\",\n        \"text\": \"quam pharetra magna ac consequat metus sapien ut nunc vestibulum ante ipsum primis in faucibus orci luctus\"\n      },\n      ]\n    }\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleSingleView = this.handleSingleView.bind(this);\n  }\n\n  handleDelete(id) {\n    this.setState({\n      posts: this.state.posts.filter(data => data.id !== id)\n    })\n  }\n  handleSingleView(id) {\n   this.setState({\n      posts: this.state.posts.filter(data => data.id === id)\n    })\n  }\n\n  render() {\n    // console.log(this);\n    return (\n      <div className=\"App\">\n      <div className=\"HeaderWrap\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Welcome Reactjs</h1>\n        </header>\n        </div>\n        <Switch>\n          <Route exact path=\"/\" render={() => (\n            <Portfolio {...this.state}\n              handleDelete={this.handleDelete}\n              handleView={this.handleView}\n            />\n            )}/>\n          <Route path=\"/:postID\" render={(props) => (\n              <SingleView {...this.state} {...props}/>\n            )}/>  \n        </Switch>\n\n\n      </div>\n    );\n  }\n}\nconst About = () => {\n  return(\n  <div>Comming from about</div>\n  )\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<BrowserRouter>\n\t\t<App />\n\t</BrowserRouter>\n\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}